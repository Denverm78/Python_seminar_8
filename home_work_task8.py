# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –µ—ë –∏ 
# –≤—Å–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. 
# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ö–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ —Ñ–∞–π–ª—ã json, csv –∏ pickle.
# ‚óã –î–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (parent_dir).
# ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —ç—Ç–æ –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (type).
# ‚óã –î–ª—è —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö (size), –∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –≤ –Ω–µ–π 
# —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (size).
# üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–∫–µ –∏ –≤ —Ä–∞–º–∫–∞—Ö –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã 
# —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.

from pathlib import Path
import json
import pickle
import csv

def get_dict_obj_info(current_file):
    dict_obj_info = {}
    dict_obj_info['file_name'] = Path(current_file).name
    dict_obj_info['parent_dir'] = Path(current_file).parent.name
    if Path(current_file).is_file():
        dict_obj_info['type'] = 'file'
        dict_obj_info['size'] = Path(current_file).stat().st_size
    else:
        dict_obj_info['type'] = 'dir'
        dict_obj_info['size'] = 0
        child_list_dir = []
        for file in Path(current_file).iterdir():
            child_dir = get_dict_obj_info(file)
            dict_obj_info['size'] = dict_obj_info['size'] + child_dir.get('size', 0)
            child_list_dir.append(child_dir)
        dict_obj_info['child'] = child_list_dir
    return dict_obj_info

def create_json(data, file_name):
    with open(file_name, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def create_pickle(data, file_name):
    with open(file_name, 'wb') as f:
        pickle.dump(data, f)

def create_csv(data, file_name):
    with open(file_name, 'w', encoding='utf-8', newline='') as f:
        list_headers = ['file_name','parent_dir', 'type', 'size']
        csw_writer = csv.DictWriter(f, fieldnames=list_headers, dialect='excel', quoting=csv.QUOTE_MINIMAL)
        csw_writer.writeheader()
        data_list = []
        convert_dict_list(data, data_list)

        csw_writer.writerows(data_list)

def convert_dict_list(data_dict, data_list):
    user_dict = {'file_name': data_dict.get('file_name', ""),
        'parent_dir': data_dict.get('parent_dir', ""),
        'size': data_dict.get('size', 0),
        'type': data_dict.get('type', "")}
    data_list.append(user_dict)
    child_list = data_dict.get('child', None)
    if child_list is not None:
        for name in child_list:
            convert_dict_list(name, data_list)
    return data_list

if __name__ == '__main__':
    
    user_path = input('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ')
    # user_path = 'L:\–û–±—É—á–µ–Ω–∏–µ'
    json_file = 'result.json'
    csv_file = 'result.csv'
    pickle_file = 'result.pickle'
    result_dict = get_dict_obj_info(user_path)
    create_json(result_dict, json_file)
    create_pickle(result_dict, pickle_file)
    create_csv(result_dict, csv_file)